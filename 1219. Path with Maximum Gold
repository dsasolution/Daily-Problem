class Solution {
public:
    int m, n;
    
    int dfs(vector<vector<int>>& grid, int i, int j){
        if(i >= m || i < 0 || j >= n || j < 0 || grid[i][j]==0) return 0;
        int sum = 0;
        int temp = grid[i][j];
        sum += temp;
        grid[i][j] = 0;

        int left = dfs(grid, i - 1, j);
        int right = dfs(grid, i + 1, j);
        int up = dfs(grid, i, j + 1);
        int down = dfs(grid, i, j - 1);

        grid[i][j] = temp;
        sum += max(left, max(right, max(up, down)));
        return sum;
    } 

    int getMaximumGold(vector<vector<int>>& grid) {
        m = grid.size();
        n = grid[0].size();
        int ans = 0;

        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j]!=0){
                    ans = max(ans, dfs(grid, i, j));
                }
            }
        }
        return ans;
    }
};
