class Solution {
public:
    vector<vector<int>> directions{{1, 0}, {-1, 0}, {0, -1}, {0, 1}};
    int n;
    bool check(vector<vector<int>> & distOfTheif, int mid){
        queue<pair<int, int>> q;
        vector<vector<bool>> visited(n, vector<bool>(n, false));

        //0 --- n-1
        q.push({0, 0});
        visited[0][0] = true;

        if(distOfTheif[0][0] < mid){
            return false;
        }

        while(!q.empty()){
            int curr_i = q.front().first;
            int curr_j = q.front().second;
            q.pop();
            if(curr_i == n-1 && curr_j == n-1) return true;

            for(vector<int> &dir : directions){
                int new_i = curr_i + dir[0];
                int new_j = curr_j + dir[1];

                if(new_i >= 0 && new_i < n && new_j >= 0 && new_j < n && visited[new_i][new_j]!=true){
                    if(distOfTheif[new_i][new_j] < mid){
                        continue;
                    }
                    q.push({new_i, new_j});
                    visited[new_i][new_j]= true;
                }
            }
        }
        return false;
    }
    int maximumSafenessFactor(vector<vector<int>>& grid) {
        n = grid.size();

        vector<vector<int>> distOfTheif(n, vector<int>(n, -1));
        queue<pair<int, int>> q;
        vector<vector<bool>> visited(n, vector<bool>(n, false));

        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j]==1){
                    q.push({i, j});
                    visited[i][j] = true;
                }
            }
        }

        int level = 0;

        while(!q.empty()){
            int size = q.size();

            while(size--){
                int curr_i = q.front().first;
                int curr_j = q.front().second;
                q.pop();

                distOfTheif[curr_i][curr_j] = level;
                for(vector<int> &dir : directions){
                    int new_i = curr_i + dir[0];
                    int new_j = curr_j + dir[1];

                    if(new_i < 0 || new_i >= n || new_j < 0 || new_j >= n || visited[new_i][new_j]){
                        continue;
                    }

                    q.push({new_i, new_j});
                    visited[new_i][new_j] = true;
                }
            }
            level++;
        }

        //Apply Binary Search

        int left = 0, right = INT_MAX, ans = 0;

        while(left <= right){
            int mid = left + (right - left)/2;
            if(check(distOfTheif, mid)){
                ans = mid;
                left = mid + 1;
            }else{
                right = mid - 1;
            }
        }

        return ans;
    }
};
