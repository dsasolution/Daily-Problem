//############################# Method - 1 #########################################
class Solution {
public:
    void helper(int index, vector<int>&nums, vector<int>&temp,vector<vector<int>>& ans){
       
        ans.push_back(temp);

        for(int i = index; i < nums.size(); i++){
            temp.push_back(nums[i]);

            helper(i + 1, nums, temp, ans);

            temp.pop_back();
        }
    }

    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        vector<int> temp;
        helper(0, nums, temp, ans);// Recursion Method
        return ans;        
    }
};


//############################# Method - 2 #########################################

class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
        int n = nums.size();
        vector<vector<int>> ans;
        for(int i = 0; i < (1 << n); i++){
            vector<int> tmp = {};
            for(int j = 0; j < n; j++){ // Bit Manupulation 
                if((i & (1 << j))!=0){
                    tmp.push_back(nums[j]);
                }
            }
            ans.push_back(tmp);
        } 
        return ans;        
    }
};
