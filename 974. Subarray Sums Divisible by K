
<<------------------------------------- Brute Force Approach---------------------------------------------->>
// Getting TLE
class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int n = nums.size();
        int count = 0;
        for(int i = 0; i < n; i++){
            for(int j = i; j < n; j++){
                int sum = 0;
                for(int l = i; l < j+1; l++) sum += nums[l];
                if(sum%k==0) count++;
            }
        }
        return count;
    }
};


<<------------------------------------- Optimal Approach Using Map---------------------------------------------->>

class Solution {
public:
    int subarraysDivByK(vector<int>& nums, int k) {
        int n = nums.size();
        unordered_map<int, int> mp;
        mp[0] = 1;
        int sum = 0, count = 0, mod;

        for (int i = 0; i < n; i++) {
            sum += nums[i];
            mod = sum % k;
            if (mod < 0)
                mod += k;

            if (mp.find(mod) != mp.end()) {
                count += mp[mod];
            }
            mp[mod]++;
        }
        return count;
    }
};
