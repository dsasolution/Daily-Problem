class Solution {
public:
    TreeNode* createBinaryTree(vector<vector<int>>& descriptions) {
        unordered_map<int, TreeNode*> mp;
        unordered_set<int> childSet; //Never be root of tree

        for(vector<int>& desc : descriptions){
            int parent = desc[0];
            int child  = desc[1];
            int isLeft = desc[2];

            if(mp.find(parent) == mp.end()){
                mp[parent] = new TreeNode(parent);
            }

            if(mp.find(child) == mp.end()){
                mp[child] = new TreeNode(child);
            }

            if(isLeft == 1){ //left child  
                mp[parent]->left = mp[child];
            } else {
                mp[parent]->right = mp[child];
            }
            childSet.insert(child);
        }
        //Find the root
        for(vector<int>& desc : descriptions){
            int parent = desc[0];
            if(childSet.find(parent) == childSet.end()) {
                return mp[parent];
            }
        }
        return NULL; //Never reach here
    }
};
