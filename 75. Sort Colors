

<<------------------------------Approach-1----------------------------------->>
class Solution {
public:
    void sortColors(vector<int>& nums) {
        //Approach - 1
        //Use Sorting Algorithm 
        //Like Bubble Sort, insertion sort, merge Sort
        sort(begin(nums), end(nums));
    }
};


<<------------------------------Approach-2----------------------------------->>

class Solution {
public:
    void sortColors(vector<int>& nums) {
        //Approach - 2;
        int n = nums.size();
        int zero = 0, one = 0, two = 0;

        for(int i = 0; i < n; i++){
            if(nums[i]==0){
                zero++;
            }else if(nums[i] == 1){
                one++;
            }else{
                two++;
            }
        }

        for(int i = 0; i < n; i++){
            if(i + 1 <= zero){
                nums[i] = 0;
            }else if(i + 1 <= zero + one){
                nums[i] = 1;
            }else if(i + 1 <= zero + one + two){
                nums[i] = 2;
            }
        }
    }
};
